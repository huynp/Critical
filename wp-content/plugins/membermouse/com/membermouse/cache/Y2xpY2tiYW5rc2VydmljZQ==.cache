/**
 * 
 * The ClickBank service supports a subset of the payment service interface. Charging orders is not supported, but the creation of orders 
 * as a result of IPN notification IS supported. Refunds and cancellations are also supported via IPN. The service also supports cancellation and refunds
 * initiated from the MemberMouse side, which it sends to ClickBank via API.
 * 
 * ClickBank uses payment links to create orders on their servers, and then sends the user to a confirmation page that they have designated.
 * This means that orders can be created in MemberMouse in 2 ways. The first way is via the confirmation page. The potential exists for the users to be
 * redirected to the confirmation page prior to the SALE ipn being sent, so the service supports creating an order based on the variables sent along with the
 * confirmation page redirect. The name is sent in one field, and no payment amount is sent, so orders created this way guess what the first and last name are (based on spacing)
 * and use the default amount of the product as stored in MemberMouse. Then the user is redirected to the confirmation page. 
 * When the IPN arrives later, it detects that the order is already created and updates the name and order/item/transaction totals to what was actually charged, which is important
 * because ClickBank has started charging customers tax
 * 
 * If the IPN arrives first, the order is created using the information in the IPN, and then when the confirmation page redirect happens after that, the existence of the order is detected, and
 * the order is simply looked up and used to create the environment necessary for generating a transaction key (@see MM_TransactionKey) and redirecting to the correct confirmation page url based on
 * the order.
 * 
 * An important thing to note about the order creation process is that the possibility exists for the confirmation redirect and the IPN to happen simultaneously (or close enough to cause problems).
 * To guard against this, a check is done against the MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS table for the existence of the clickbank receipt number (ctransreceipt or cbreceipt, depending) and
 * if it doesnt exist, the first thing the __createOrder method does is put an entry in that table for the receipt number, with a placeholder value that later gets updated for the order item.
 * The check and the __createOrder method NEED to happen as close together as possible, in order to ensure that this happens fast enough in all scenarios to avoid two processes entering that code block
 * at the same time. 
 * 
 * An example is that, at the time of writing, the IPN creation method does the check on line 824, and then calls __createOrder on line 826.  It is crucial that there be no significant delay between the check and the create call
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
class MM_ClickBankService extends MM_PaymentService
{
	protected $token = "CLICKBANK"; 
	
	protected $siteName = "";
	protected $apiDeveloperKey = "";
	protected $apiClerkKey = "";
	
	protected $secretKey = "";	
	protected $fallbackConfirmationPage = "";
	
	protected $supportedCurrencies = array("ARS","AUD","BRL","CAD","CHF","CLP","CNY","COP","CZK","DKK",
			"EUR","GBP","HKD","HUF","IDR","INR","JPY","KRW","MXN","MYR","NOK","NZD","PHP","PLN","RUB",
			"SEK","SGD","THB","TRY","USD","ZAR");
	
	public function __construct()
	{
		parent::__construct();
	}
	
	
	public function install() 
	{ 
		parent::install();
		
		$sql = "CREATE TABLE ".MM_TABLE_CLICKBANK_PRODUCT_LINKS." (\n".
				"membermouse_product_id BIGINT(20) NOT NULL,\n".
				"clickbank_product_id VARCHAR(10) NOT NULL,\n".
				"UNIQUE KEY clickbank_to_mm_prodid_idx (clickbank_product_id,membermouse_product_id)\n".
				");\n";		
		$sql.= "CREATE TABLE ".MM_TABLE_CLICKBANK_IPN_LOG." (\n".
				"id BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,\n".
				"ctransreceipt VARCHAR(14) NOT NULL,\n".
				"cupsellreceipt VARCHAR(14),\n".
				"ctransaction VARCHAR(16) NOT NULL,\n".
				"corderamount INT(11),\n".
				"ctransaffiliate VARCHAR(10),\n".
				"crebillamnt INT(11) DEFAULT '0',\n".
				"cprocessedpayments  TINYINT(2),\n".
				"cfuturepayments TINYINT(2),\n".
				"cnextpaymentdate DATETIME,\n".
				"crebillstatus VARCHAR(10),\n".
				"ctranstime INT(10),\n".
				"recurring TINYINT NOT NULL,\n".
				"date_received DATETIME NOT NULL,\n".
				"PRIMARY KEY  (id),\n".
				"KEY ctransreceipt_idx (ctransreceipt)\n".
				");\n";	
		$sql.=  "CREATE TABLE ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." (\n".
				"ctransreceipt VARCHAR(16) NOT NULL,\n".
				"order_item_id BIGINT(20) UNSIGNED NOT NULL,\n".
				"UNIQUE KEY clickbank_to_mm_orderitem_idx (ctransreceipt,order_item_id),\n".
				"KEY clickbank_receipt_order_item_id_idx (order_item_id)\n".
				");\n";
		dbDelta($sql);
	}
	
	
	/**
	 * Report the features the ClickBank service supports
	 * @see MM_PaymentService::supportsFeature()
	 *
	 * @param integer $featureConst a const as defined in MM_PaymentServiceFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
		$supported[] = MM_PaymentServiceFeatures::OFFSITE_SERVICE;
		return in_array($featureConst,$supported,true);
	}
	
	
	/**
	 * Returns the html that will be used on the payment method settings screen for configuring ClickBank
	 * @see MM_PaymentService::displayConfigOptions()
	 * 
	 * @return String containing the configuration dialog html
	 */
	public function displayConfigOptions()
	{
		$config_options = MM_TEMPLATE::generate("{$this->getTemplateDir()}/clickbank_config.html.php",$this);
		return $config_options;
	}
	
	
	/**
	 * Validates and configures the object with the settings information generated by submission of the configuration dialog
	 * @see MM_PaymentService::processConfigOptions()
	 *
	 * @param $post An array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS indicating successful validation and assigment. On error, the type will be MM_Response::ERROR and the message will contain the error messages
	 */
	public function processConfigOptions($post) 
	{ 
		$active = isset($post['offsite_payment_services']) && in_array(strtolower($this->getToken()), $post['offsite_payment_services']);
		$this->setActive($active);
		
		if ($active)
		{
			$this->install();
			$config = isset($post['payment_service']['clickbank'])?$post['payment_service']['clickbank']:array();
			$empty_errors = "";
			$requiredValues = array("site_name"=>"Site Name","secret_key"=>"Secret Key", "api_developer_key"=>"Developer Key","api_clerk_key"=>"Clerk Key");
			foreach ($requiredValues as $k=>$v)
			{
				if (empty($config[$k]))
				{
					$empty_errors .= "ClickBank: Please enter a value for the {$v}\n";
				}
			}
			
			if ($empty_errors != "")
			{
				return new MM_Response($empty_errors,MM_Response::$ERROR);
			}
			
			//if here, that means the required values are present
			$this->setSiteName($config['site_name']);
			$this->setSecretKey($config['secret_key']);
			$this->setAPIDeveloperKey($config['api_developer_key']);
			$this->setAPIClerkKey($config['api_clerk_key']);
			$this->setFallbackConfirmationPage($config['fallback_confirmation_page']);
		}
		return new MM_Response();
	}		
	
	
	/**
	 * Processes ClickBank IPN notifications. Used to notify MemberMouse of sales, rebills, refunds, and cancellations, even those
	 * initiated from the ClickBank side
	 * @see MM_PaymentService::processNotification()
	 *
	 * @param array $request The $_POST superglobal, which will contain the IPN
	 * @return MM_PaymentServiceResponse indicating the status of any operations performed in the method. The message field of the response will be echoed to the script caller verbatim
	 */
	public function processNotification($request) 
	{
		$this->install();

		MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "Process Notification (".print_r($request, true).")");
		
		if (!empty($_GET['op']) && ($_GET['op'] == "conf"))
		{
			$this->redirectToConfirmationPage($_REQUEST);
		}

		//TODO: duplicate detection
		//TODO: bail if no ctransreceipt, they all need it (?)
		
		if ($this->verifyIPN($request))
		{
			$transactionType = $request['ctransaction'];
			switch ($transactionType)
			{
				case "TEST_SALE":
				case "SALE":
					//Sale Processing
					return MM_PaymentServiceResponse::translate($this->createOrderFromIPN($request));
					break;
				case "TEST_BILL":
				case "BILL":
					return MM_PaymentServiceResponse::translate($this->processRebillNotification($request));
					break;
				case "TEST_RFND":
				case "RFND":
					return MM_PaymentServiceResponse::translate($this->processRefundNotification($request));
					break;
				case "CGBK":
				case "INSF":
					return MM_PaymentServiceResponse::translate($this->processChargebackNotification($request));
					break;
				case "CANCEL-REBILL":
					return MM_PaymentServiceResponse::translate($this->processCancellationNotification($request));
					break;
				case "UNCANCEL-REBILL":
					return MM_PaymentServiceResponse::translate($this->processUncancellationNotification($request));
					break;
				case "TEST":
					return new MM_PaymentServiceResponse("Test Successful");
					break;
				default:
					break;	
			}
		}
		else
		{
			return new MM_PaymentServiceResponse("Error validating IPN",MM_PaymentServiceResponse::$ERROR);
		}
	}
	
	
	/**
	 * Creates an order based on ClickBank confirmation vars in the $request (if necessary), otherwise looks up the order. 
	 * Then the user is redirected to the confirmation page for the referenced order
	 * 
	 * @param array $request The $_POST superglobal, which will contain the IPN
	 */
	protected function redirectToConfirmationPage($request)
	{
		global $wpdb;
		
		//first validate the incoming parameters to prevent spoofing
		$key = $this->getSecretKey();
		$rcpt = !empty($request['cbreceipt'])?$request['cbreceipt']:"";
		$time = !empty($request['time'])?$request['time']:"";
		$item = !empty($request['item'])?$request['item']:"";
		$cbpop = !empty($request['cbpop'])?$request['cbpop']:"";
		$xxpop=sha1("$key|$rcpt|$time|$item");
		$xxpop=strtoupper(substr($xxpop,0,8));
		
		MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB confirmation request: ".print_r($request,true));
		if ($cbpop==$xxpop) //cipher matches
		{
			if (!empty($rcpt))
			{
				//the confirmation page returns the name as one field. We can assume in most cases that it will be the firstname and last name concatenated
				//we can reverse engineer it by splitting on spaces, and assume that the last item in the array is the lastname, and everything else is the first name
				//in the vast majority of cases, there will be only 2 array members, because most compound first names (or last names) are hyphenated
				$fullname = !empty($request['cname'])?$request['cname']:"";
				$pieces = explode(" ",$fullname);
				$piecesLength = count($pieces);
				if ($piecesLength > 1)
				{
					MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (first name split block)");
					$firstname = ucfirst(strtolower(implode(" ",array_slice($pieces,0,($piecesLength-1)))));
					$lastname = ucfirst(strtolower($pieces[$piecesLength-1]));
				}
				else 
				{
					//there were no spaces
					MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (second name split block)");
					$firstname = ucfirst(strtolower($request['cname']));
					$lastname  = "";
				}
				
				MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation: First: {$firstname}, Last: {$lastname}");
				$billingAddress = new MM_CustomerAddress($firstname,$lastname,"","","","",$request['czip'],"",$request['ccountry']);
				$shippingAddress = null;
				$email = !empty($request['cemail'])?$request['cemail']:"";
				$affId = !empty($request['cbaffi'])?$request['cbaffi']:"";
				$order = null; //default
				if (!$this->checkForExistingOrder($rcpt))
				{
					MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (creating order): ");
					$createResponse = $this->__createOrder($firstname, $lastname, $email, $item, $rcpt, $billingAddress,$shippingAddress,$affId);
					if (MM_Response::isSuccess($createResponse) && ($createResponse->message instanceof MM_Order))
					{
						$order = $createResponse->message;
					}
				}
				else 
				{
					//order already created, look it up
					MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (order exists): ");
					
					//the potential exists for there to be a race condition between the confirmation and the IPN, whereas the lookup fails when 
					//performed prior to the order being written. This next block guards against that by doing controlled sleeps until the order item id
					//is present in the table
					$maxRetries = 5;
					$numSleeps = 0;
					$lookupQuery = $wpdb->prepare("SELECT order_item_id FROM ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." WHERE ctransreceipt=%s",$receiptNumber);
					$orderItemId = $wpdb->get_var($lookupQuery);
					
					while (($orderItemId == 0) && ($numSleeps++ < $maxRetries))
					{
						MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "Waiting for order: {$numSleeps}...");
						usleep(1200000); //sleep for 1200ms
						$orderItemId = $wpdb->get_var($lookupQuery);
					}
					
					if (!is_null($orderItemId) && ($orderItemId > 0))
					{
						$orderItem = new MM_OrderItem($orderItemId);
						if ($orderItem->isValid())
						{
							MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (found order item)");
							$order = new MM_Order($orderItem->getOrderId());
						}
					}
					else 
					{
						MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (order exists but could not be read): order item id = ".(is_null($orderItemId)?"null":$orderItemId));
					}
				}
				
				if (!is_null($order))
				{
					MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (redirect block)");
					MM_Session::value(MM_Session::$KEY_LAST_USER_ID,MM_Order::getUserIdByOrderId($order->getId()));
					$confirmationUrl = MM_AccessControlEngine::getConfirmationUrlForOrder($order);
					if ($confirmationUrl !== false)
					{
						wp_redirect($confirmationUrl);
						exit;
					}
				}
			}
		}
		
		//if execution reaches here, we were not able to locate the order, not much that can be done
		//redirect to the main site url or the fallback confirmation page
		MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB Confirmation (falling through to default redirect)");
		wp_redirect($this->getFallbackConfirmationPage());
		exit;
	}
	
	/**
	 * Process notification of a un-cancellation from ClickBank
	 *
	 * @param array $post
	 * @return MM_Response indicating success or failure
	 */
	protected function processUncancellationNotification($post)
	{
		$orderItem = $this->lookupOrderItemFromReceipt($post['ctransreceipt']);
		if (is_null($orderItem))
		{
			return new MM_Response("Unable to process ClickBank un-cancellation: could not find a matching order item",MM_Response::$ERROR);
		}
		
		if ($orderItem->isRecurring() && ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
			$orderItem->commitData();
		}
		$user = new MM_User(MM_Order::getUserIdByOrderId($orderItem->getOrderId()));
		return MM_AccessControlEngine::assignAccessFromOrderItems($user, array($orderItem));
	}
	
	
	/**
	 * Process notification of a cancellation from ClickBank
	 *
	 * @param array $post
	 * @return MM_Response indicating success or failure
	 */
	protected function processCancellationNotification($post)
	{
		$orderItem = $this->lookupOrderItemFromReceipt($post['ctransreceipt']);
		if (is_null($orderItem))
		{
			return new MM_Response("Unable to process ClickBank cancellation: could not find a matching order item",MM_Response::$ERROR);
		}
		
		if ($orderItem->isRecurring() && ($orderItem->getStatus() != MM_OrderItem::$STATUS_RECURRING_CANCELLED))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
			$orderItem->commitData();
		}
		
		return MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
	}
	
	
	/**
	 * Process notification of a chargeback or failed e-check from ClickBank
	 *
	 * @param array $post
	 * @return MM_Response indicating success or failure
	 */
	protected function processChargebackNotification($post)
	{
		$logIPNResponse = $this->logIPN($post);
		$ipnId = MM_Response::isSuccess($logIPNResponse)?$logIPNResponse->message:null;
		
		$orderItem = $this->lookupOrderItemFromReceipt($post['ctransreceipt']);
		if (is_null($orderItem))
		{
			return new MM_Response("Unable to process ClickBank chargeback or failed e-check notification: could not find a matching order item",MM_Response::$ERROR);
		}
		
		$order = new MM_Order($orderItem->getOrderId());
		$chargebackAmount = (!empty($post['corderamount']) && is_numeric($post['corderamount']))?($post['corderamount']/100):$orderItem->getAmount();
		$transactionDescription = "Chargeback for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
		$transactionLogResponse = MM_TransactionLog::createTransactionEntry($order->getId(), $orderItemId, $chargebackAmount, $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_CHARGEBACK,false,$this->getId(),$ipnId);
		
		if ($orderItem->isRecurring())
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED);
			$orderItem->commitData();
		}
		$revokeAccessResponse = MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
		return $revokeAccessResponse;
	}
	
	
	/**
	 * Process notification of a refund from ClickBank
	 * 
	 * @param array $post
	 * @return MM_Response indicating success or failure
	 */
	protected function processRefundNotification($post)
	{
		global $wpdb;
		
		$lookupSQL = "SELECT id FROM ".MM_TABLE_CLICKBANK_IPN_LOG." WHERE ctransreceipt=%s AND ctranstime=%s";
		if (!empty($post['cprodtype']) && (strtoupper($post['cprodtype']) == "RECURRING") && !empty($post['cprocessedpayments']))
		{
			$lookupSQL.= $wpdb->prepare(" AND cprocessedpayments=%s",$post['cprocessedpayments']);
		}
		$lookupSQL.=" ORDER BY id DESC LIMIT 1";
		
		$originalIPNID = $wpdb->get_var($wpdb->prepare($lookupSQL,$post['ctransreceipt'],$post['ctranstime']));
		if (is_null($originalIPNID))
		{
			return new MM_Response("Unable to process refund: Could not find the original ClickBank order",MM_Response::$ERROR);
		}
		
		//find the matching transaction
		$transactionRow = $wpdb->get_row($wpdb->prepare("SELECT * FROM ".MM_TABLE_TRANSACTION_LOG." WHERE payment_service_id=%s AND payment_service_detail_id=%s",$this->getId(),$originalIPNID));
		if (is_null($transactionRow))
		{
			return new MM_Response("Unable to process refund: Could not find the matching transaction for the ClickBank charge being refunded",MM_Response::$ERROR);
		}
		
		//log the new IPN
		$ipnResponse = $this->logIPN($post);
		if (MM_Response::isError($ipnResponse))
		{
			return new MM_PaymentServiceResponse("Error logging refund IPN for order item id {$orderItemId}", MM_PaymentServiceResponse::$ERROR);
		}
		$ipnId = $ipnResponse->message;
		
		//if the transaction has already been refunded, bail
		if (!empty($transactionRow->refund_id))
		{
			return new MM_Response("Unable to process refund: the designated ClickBank transaction has already been refunded",MM_Response::$ERROR);
		}
		
		//create a refund transaction
		$transactionDescription = "Refund for transaction# {$transactionRow->id}";
		$response = MM_TransactionLog::createTransactionEntry($transactionRow->order_id,
				$transactionRow->order_item_id,
				$refundAmount,
				$transactionRow->currency,
				$transactionDescription,
				MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
				false,
				$this->getId(),
				$ipnId,
				MM_Utils::getCurrentTime(),
				$transactionRow->id);
		if (MM_Response::isSuccess($response))
		{
			$wpdb->query($wpdb->prepare("UPDATE ".MM_TABLE_TRANSACTION_LOG." SET refund_id = %s WHERE id = %s",$response->message,$transactionRow->id));
		}
		
		//refunds on ClickBank automatically cancel recurring subscriptions
		return $this->processCancellationNotification($post);
	}
	
	
	/**
	 * Process notification of a rebill from ClickBank
	 * 
	 * @param array $post
	 * @return MM_Response indicating success or failure
	 */
	protected function processRebillNotification($post)
	{
		$logIPNResponse = $this->logIPN($post);
		$ipnId = MM_Response::isSuccess($logIPNResponse)?$logIPNResponse->message:null;
		
		$pieces = explode("-",$post['ctransreceipt']);
		$rootTransReceipt = is_array($pieces)?$pieces[0]:$post['ctransreceipt'];
		
		$orderItem = $this->lookupOrderItemFromReceipt($rootTransReceipt);
		if (is_null($orderItem))
		{
			return new MM_Response("Unable to process ClickBank recurring payment notification: could not find a matching order",MM_Response::$ERROR);
		}
		
		$paymentAmount = isset($post['corderamount'])?$post['corderamount']:0.00;
		$paymentAmount = is_numeric($paymentAmount)?(intval($paymentAmount)/100):0.00;
		
		$order = new MM_Order($orderItem->getOrderId());
		$transactionDescription = "Recurring payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
		$transactionLogResponse = MM_TransactionLog::createTransactionEntry($order->getId(), $orderItem->getId(), $paymentAmount, $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,true,$this->getId(),$ipnId);
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED)
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
			$orderItem->commitData();
			MM_AccessControlEngine::assignAccessFromOrderItems($order->getCustomer(), array($orderItem)); //reinstate access
		}
		
		if (MM_Response::isError($transactionLogResponse))
		{
			return $transactionLogResponse;
		}
		
		return new MM_Response();
	}
	
	
	/**
	 * Returns the order item linked to the ClickBank receipt number (ctransreceipt) provided
	 * 
	 * @param string $receiptNumber the ClickBank receipt number (ctransreceipt) to lookup
	 * @return MM_OrderItem if the lookup is successful, null if it fails
	 */
	protected function lookupOrderItemFromReceipt($receiptNumber)
	{
		global $wpdb;
		
		if (empty($receiptNumber))
		{
			return null;
		}
		
		$orderItem = null;		
		$lookupQuery = "SELECT order_item_id FROM ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." WHERE ctransreceipt=%s";
		$orderItemId = $wpdb->get_var($wpdb->prepare($lookupQuery,$receiptNumber));
		if (!is_null($orderItemId))
		{
			$orderItem = new MM_OrderItem($orderItemId);
			if (!$orderItem->isValid())
			{
				return null;
			}
		}
		return $orderItem;
	}
	
	
	/**
	 * Returns the ClickBank receipt number (ctransreceipt) linked to the order item
	 *
	 * @param int $orderItemId the id of the order item to look up
	 * @return string receipt number on success, null on failure
	 */
	protected function lookupReceiptFromOrderItemId($orderItemId)
	{
		global $wpdb;
	
		if (empty($orderItemId))
		{
			return null;
		}
	
		$orderItem = null;
		$lookupQuery = "SELECT ctransreceipt FROM ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." WHERE order_item_id=%s";
		$ctransreceipt = $wpdb->get_var($wpdb->prepare($lookupQuery,$orderItemId));
		return $ctransreceipt;
	}
	
	
	/**
	 * Processes information from the settings screen prior to the payment service settings being saved. Allows for
	 * data to be retrieved from ClickBank using ajax during the configuration process
	 *
	 * @param $post An array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS containing any requested data as the message, or a MM_Response of type ERROR on failure
	 */
	public function processIntermediateAction($post)
	{
		$this->install();
		if ((!isset($post['payment_service']['clickbank'])) || !(is_array($post['payment_service']['clickbank'])))
		{
			return new MM_Response("No configuration information sent to processIntermediateAction",MM_Response::$ERROR);
		}
		$config = $post['payment_service']['clickbank'];
	
		if (!empty($config['secret_key']))
		{
			$this->setSecretKey($config['secret_key']);
		}
		
		if (!empty($config['api_developer_key']) && !empty($config['api_clerk_key']))
		{
			$this->setAPIDeveloperKey($config['api_developer_key']);
			$this->setAPIClerkKey($config['api_clerk_key']);
		}
		
		if (!empty($config['site_name']))
		{
			$this->setSiteName($config['site_name']);
		}

		//perform the requested action
		$config['command'] = !empty($config['command'])?$config['command']:"";
		switch ($config['command']) 
		{
			case 'populate_sites':
				//retrieve the list of sites the user has access to. This will also highlight an incorrect setup of their clerk key
				return $this->getSiteList();
				break;
			case 'retrieve_products':
				return $this->getProductMappingsDialog();
				break;
			case 'save_product_mappings':
				return $this->saveProductMappings($post);
				break;
			default:
				return new MM_Response("ClickBank: Unknown command",MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * There are potentially hundreds of mappings that need to be saved. Rather than issue multiple inserts and round-trip to the db for each one, this method
	 * utilizes mySQL's batch insert mechanism to create one insert for all the rows
	 * 
	 * @param The $_POST request containing the mappings $post
	 * @return MM_Response indicating success or failure
	 */
	protected function saveProductMappings($post)
	{
		global $wpdb;
		
		$wpdb->query("DELETE FROM ".MM_TABLE_CLICKBANK_PRODUCT_LINKS);
		
		$clickbankProductMappings = isset($post['clickbank_product_mapping'])?$post['clickbank_product_mapping']:array();
		
		$product_mappings = array();
		foreach ($clickbankProductMappings as $key => $value) 
		{
			$product_mappings[] = $wpdb->prepare('(%s, %s)', $key, $value);
		}
		$values = implode(', ', $product_mappings);
		$res = $wpdb->query("INSERT INTO ".MM_TABLE_CLICKBANK_PRODUCT_LINKS." (clickbank_product_id,membermouse_product_id) VALUES $values");		
		if ($res === false)
		{
			return new MM_Response("Error saving ClickBank product mappings");
		}
		return new MM_Response();
	}
	
	
	/**
	 * Returns an array of curl options containing authentication headers and headers instructing the ClickBank API to return us JSON
	 * 
	 * @return multitype:multitype:string
	 */
	private function getClickbankJSONAPIHeaders()
	{
		return array(CURLOPT_HTTPHEADER=>array("Authorization:{$this->getAPIDeveloperKey()}:{$this->getAPIClerkKey()}", "Accept:application/json"));
	}
	
	
	/**
	 * Returns the list of sites that can be accessed using the supplied dev and clerk keys
	 * 
	 * @return MM_Response
	 */
	private function getSiteList()
	{
		$endpoint = "{$this->getAPIUrl()}/quickstats/accounts";
		$siteListResponse = $this->doHTTPRequest($endpoint,"GET","",$this->getClickbankJSONAPIHeaders());
		if (MM_Response::isError($siteListResponse))
		{
			return $siteListResponse;
		}
		$responseObj = json_decode($siteListResponse->message);
		if ($responseObj === false)
		{
			return new MM_Response("Error retrieving sites from ClickBank",MM_Response::$ERROR);
		}
		$siteNames = array();
		
		// ClickBank has different version using different protocols for the response data. This detects if an 
		// accountData attribute is present to determine which protocol is being used
		if(isset($responseObj->accountData))
		{
			$responseObj = $responseObj->accountData;
		}
		
		if(!is_array($responseObj))
		{
			//the documentation is really poor about what we can expect back, so the assumption is being made that with multiple 
			//sites, the return value will be an array of json objects, but for a single object only the object is returned.
			//this places single objects into an array, so that both scenarios can be handled by the same code block
			$responseObj = array($responseObj);
		}
		
		foreach ($responseObj as $account)
		{
			// check for data in first possible protocol
			if (isset($account->accountData->nickName))
			{
				$siteNames[] = $account->accountData->nickName;
			}
			
			// check for data in second possible protocol
			else if(isset($account->nickName))
			{
				$siteNames[] = $account->nickName;
			}
		}
		return new MM_Response($siteNames);
	}
	
	
	/**
	 * Returns the HTML for the product-mapping configuration dialog
	 * 
	 * @return MM_Response on success, contains the html for the dialog as the message, on error the message details the error
	 */
	private function getProductMappingsDialog()
	{
		global $wpdb;
		$this->install(); //creates the necessary tables if this is first run
		
		//retrieve clickbank products via api
		$endpoint = "{$this->getAPIUrl()}/products/list?site={$this->getSiteName()}";
		$retrieveProductsResponse = $this->doHTTPRequest($endpoint,"GET","",$this->getClickbankJSONAPIHeaders());
		if (MM_Response::isError($retrieveProductsResponse))
		{
			return $retrieveProductsResponse;
		}
		$responseObj = json_decode($retrieveProductsResponse->message);
		
		// When there's only one product in ClickBank and the response object is decoded, products->product is set as an object 
		// containing the data associated with the single product instead of being set as a single-item array. Since the following 
		// code expects products->product to be an array, attempt to modify the JSON in order to standardize the structure.
		if (($responseObj !== false) && isset($responseObj->total_record_count) && intval($responseObj->total_record_count) == 1)
		{
			if(isset($responseObj->products->product) && !is_array($responseObj->products->product))
			{
				$productObj = $responseObj->products->product;
				$responseObj->products->product = array();
				$responseObj->products->product[] = $productObj;
			}
		}
		
		if (($responseObj === false) || !isset($responseObj->products->product) || !is_array($responseObj->products->product))
		{
			return new MM_Response("Error retrieving products from ClickBank",MM_Response::$ERROR);
		}
		
		if (count($responseObj->products->product) == 0)
		{
			return new MM_Response("There are no products configured in ClickBank. Products must be configured in ClickBank prior to mapping them to MemberMouse products",MM_Response::$ERROR);
		}
		
		//retrieve local mappings
		$localMappings = array();
		$localMappingsSql = "SELECT membermouse_product_id, clickbank_product_id FROM ".MM_TABLE_CLICKBANK_PRODUCT_LINKS;
		$localMappingsResults = $wpdb->get_results($localMappingsSql);
		if (!is_null($localMappingsResults))
		{
			foreach ($localMappingsResults as $localMappingResult)
			{
				$localMappings[$localMappingResult->clickbank_product_id] = $localMappingResult->membermouse_product_id;
			}
		}
		
		//place the clickbank products (if any) into an array and add an attribute to each product to indicate if/how it is mapped
		$clickbankProducts = array();
		$skuName = "@sku"; //testing has showed that clickbank products have an id and a sku, but the sku is passed back as the id in the IPN.
						   //so the sku needs to be used everywhere an id is stored externally to reference a clickbank product
		foreach ($responseObj->products->product as $productObj)
		{
			if (isset($localMappings[$productObj->$skuName]))
			{
				$productObj->mapped = true;
				$productObj->membermouse_product_id = $localMappings[$productObj->$skuName];
			}
			else 
			{
				$productObj->mapped = false;
			}
			$clickbankProducts[] = $productObj;
		}
		
		//retrieve membermouse products and put them into an array
		$membermouseProducts = array();
		$membermouseProductSQL = "SELECT id, name, price FROM ".MM_TABLE_PRODUCTS;
		$membermouseProductResults = $wpdb->get_results($membermouseProductSQL);
		if (!is_null($membermouseProductResults))
		{
			foreach ($membermouseProductResults as $membermouseProductResult)
			{
				//the MM_Product object is heavier than we need on the front end, so instead use the generic object created by the products query
				//this has the benefit of automatically passing back any fields we add to the query in the future
				$membermouseProducts[$membermouseProductResult->id] = $membermouseProductResult;
			}
		}	
		
		//attach the clickbank products array and the membermouse products array to a results object, and return it		
		$resultsObj = new stdClass();
		$resultsObj->clickbank_products = $clickbankProducts;
		$resultsObj->membermouse_products = $membermouseProducts;
		$dialog = MM_TEMPLATE::generate($this->getTemplateDir()."/clickbank_configure_products.dialog.php",$resultsObj);
		return new MM_Response($dialog);
		
	}
	
	
	/**
	 * Verifies the ClickBank IPN using their algorithm for message verification. Essentially, all of the POST parameters
	 * minus the 'cverify' field are concatenated using pipes, and then the secret key is appended (also separated by a pipe),
	 * and then the entire string is converted to UTF-8 and a sha1 hash is created from the result. The uppercase values of the 
	 * first 8 characters of that string should match the contents of $request['cverify']
	 * 
	 * @param array $request The $_POST array representing the request
	 * @return boolean true if verification is successful, false if it fails
	 */
	protected function verifyIPN($request)
	{
		
		if (!is_array($request) || !isset($request['cverify']))
		{
			return false;
		}
		$cverify = $request['cverify'];
		unset($request['cverify']);
		ksort($request);
		$rawString = implode("|",$request);
		$rawString .= "|{$this->secretKey}";
		$calcedVerify = sha1(mb_convert_encoding($rawString, "UTF-8"));
		$calcedVerify = strtoupper(substr($calcedVerify,0,8));
		return ($calcedVerify == $cverify);
	}
	
	
	/**
	 * Creates an order from an incoming IPN request, if possible
	 * 
	 * @param array $request The IPN request to attempt to create an order from
	 * @return MM_Response indicating success or failure
	 */
	protected function createOrderFromIPN($request)
	{
		global $wpdb;
		
		//first log the ipn
		MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: request = ".print_r($request,true));
		$logIPNResponse = $this->logIPN($request);
		$ipnId = (MM_Response::isSuccess($logIPNResponse))?$logIPNResponse->message:"";
		
		//make sure required fields exist
		$required = array("ccustemail" => "customer email",
						  "cproditem"  => "product",
						  "ctransreceipt" => "ClickBank receipt number"   
		);
		
		foreach ($required as $k=>$v)
		{
			if (empty($request[$k]))
			{
				MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: Missing required field {$request[$k]}");
				return new MM_Response("Cannot create ClickBank order without a {$v} ({$k})",MM_Response::$ERROR);
			}
		}
		
		//create order
		$cbReceipt = $request['ctransreceipt'];
		$cbProductID = $request['cproditem'];
		$email = $request['ccustemail'];
		$currency = isset($request['ccurrency'])?$request['ccurrency']:"USD";
		
		$firstname = !empty($request['ccustfirstname'])?ucfirst(strtolower($request['ccustfirstname'])):"";
		$lastname  = !empty($request['ccustlastname'])?ucfirst(strtolower($request['ccustlastname'])):"";
		$billingAddress = new MM_CustomerAddress($firstname,$lastname,"","","",$request['ccuststate'],$request['ccustzip'],"",$request['ccustcc']);
		$shippingAddress = null;
		$orderAmount = !empty($request['corderamount'])?(intval($request['corderamount'])/100):""; //clickbank sends amounts as integers
		if (!empty($request['ccustaddr1']) || !empty($request['ccustaddr2']))
		{
			$shippingAddress = new MM_CustomerAddress($firstname,$lastname,$request['ccustaddr1'],$request['ccustaddr2'],$request['ccustcity'],$request['ccustshippingstate'],$request['ccustshippingzip'],"",$request['ccustshippingcountry']);
		}
		
		$affId = !empty($request['ctransaffiliate'])?$request['ctransaffiliate']:"";
		
		MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: checking for existence of clickbank order# {$cbReceipt}");
		if (!$this->checkForExistingOrder($cbReceipt))
		{
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: order not found, creating order for clickbank order# {$cbReceipt}");
			$createResponse = $this->__createOrder($firstname, $lastname, $email, $cbProductID, $cbReceipt, $billingAddress, $shippingAddress, $affId, $orderAmount,$ipnId);
			if (MM_Response::isError($createResponse))
			{
				MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: error creating clickbank order# {$cbReceipt}:".$createResponse->message);
				return $createResponse;
			}
		}
		else
		{
			//order exists, lookup and update the user's name, and the order amount
			MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: order already exists for clickbank receipt# {$cbReceipt}, retrieving it");
			$orderItem = $this->lookupOrderItemFromReceipt($cbReceipt);
			if (!is_null($orderItem))
			{
				MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: order item lookup successful");
				$order = new MM_Order($orderItem->getOrderId());
				if ($order->isValid())
				{
					MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: order successfully retrieved");
					if ($orderAmount !== "")
					{
						MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: modifying order id {$order->getId()} to have new total of $orderAmount");
						$order->setTotal($orderAmount);
						$order->setCurrency($currency);
						$orderProductItems = $order->getProducts();
						$orderItem = reset($orderProductItems);
						$orderItem->setAmount($orderAmount);
						$orderItem->setTotal($orderAmount);
						$order->commitData();
						
						//now update the transaction
						$transParams = array("order_id"=>$orderItem->getOrderId(),
											 "order_item_id"=>$orderItem->getId(),
											 "payment_service_id"=>$this->getId());
						
						$chargeTransParams = array("transaction_type"=>MM_TransactionLog::$TRANSACTION_TYPE_CHARGE) + $transParams;
						$wpdb->update(MM_TABLE_TRANSACTION_LOG, array("amount"=>$orderAmount, "currency"=>$currency), $chargeTransParams); //update the charge
						$paymentTransParams = array("transaction_type"=>MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT) + $transParams;
						$wpdb->update(MM_TABLE_TRANSACTION_LOG, array("amount"=>(-$orderAmount), "currency"=>$currency),$paymentTransParams); //update the payment
					}
					MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: attempting to lookup customer on existing order");
					$user = $order->getCustomer();
					if ($user->isValid() && ($user->getEmail() == $email)) //precaution
					{
						MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: customer from retrieved order was valid, updating name fields with IPN values");
						$user->setFirstName($firstname);
						$user->setLastName($lastname);
						$user->commitData();
						MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: customer first: {$firstname} , last: {$lastname}");
					}
				}
			}
		}
		MM_DiagnosticLog::log(MM_DiagnosticLog::$MM_ERROR, "CB IPN: completed IPN create method");
		return new MM_Response();
	}
	
	
	/**
	 * Checks to see if a ClickBank receipt number already has an order created
	 * 
	 * @param string $receiptNumber The ClickBank receipt number to check
	 * @return boolean true or false
	 */
	private function checkForExistingOrder($receiptNumber)
	{
		global $wpdb;
		
		$existingSQL = "SELECT count(*) as existing FROM ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." WHERE ctransreceipt=%s";
		$numOrders = $wpdb->get_var($wpdb->prepare($existingSQL,$receiptNumber));
		if (is_null($numOrders))
		{
			return false;
		}
		return (intval($numOrders) > 0);
	}
	
	
	/**
	 * __createOrder() is an internal method that creates an order using ClickBank-supplied parameters
	 * 
	 * @param string $firstname
	 * @param string $lastname
	 * @param string $email
	 * @param string $cbProductID
	 * @param string $cbReceipt
	 * @param MM_CustomerAddress $billingAddress
	 * @param MM_CustomerAddress $shippingAddress
	 * @param string $affId
	 * 
	 * @return MM_Response containing the MM_Order object on success or a descriptive error message on error
	 */
	private function __createOrder($firstname, $lastname, $email, $cbProductID, $cbReceipt, MM_CustomerAddress $billingAddress, MM_CustomerAddress $shippingAddress=null, $affId="", $orderAmount="",$ipnId=null, $currency="")
	{
		global $wpdb;
		
		//insert a placeholder in the order item link table to let other processes know this order is being handled
		$linkData = array("ctransreceipt" => $cbReceipt,
				"order_item_id" => 0
		);
		$wpdb->insert(MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS, $linkData);
		
		try 
		{	
			//set the currency to the active currency if one was not supplied
			$currency = !empty($currency)?$currency:MM_CurrencyUtil::getActiveCurrency();
			//retrieve matching mm product
			$sql = "SELECT membermouse_product_id from ".MM_TABLE_CLICKBANK_PRODUCT_LINKS." where clickbank_product_id=%s";
			$productId = $wpdb->get_var($wpdb->prepare($sql,$cbProductID));
			$product = new MM_Product($productId);
			if (is_null($productId) || !$product->isValid())
			{
				throw new Exception("Cannot create ClickBank order because ClickBank product id {$cbProductID} is not linked to any local products");
			}
			
			$user = MM_User::findByEmail($email);
			if (!$user->isValid()) //this is a new customer
			{
				//TODO: if this is an upsell, should we check can the customer be pulled from the original order?
				$user->setFirstName($firstname);
				$user->setLastName($lastname);
				$user->setEmail($email);
				if (!empty($affId))
				{
					$user->setOriginAffiliateId($affId);
				}
				$user->commitData();
			}
			
			$order = new MM_Order();
			$order->setCustomer($user);
			$order->addProduct($product);
			
			$orderProductItems = $order->getProducts();
			$orderItem = reset($orderProductItems); //should only be one product, get a reference to it
				
			if ($orderItem->isRecurring())
			{
				//in other services this is done after payment is received, however with clickbank, payment happens prior to order creation so we set the status in this process
				$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
			}
			
			if ($orderAmount !== "")
			{
				//an amount was passed in
				$order->setTotal($orderAmount);
				$order->setCurrency($currency);
				$orderItem->setAmount($orderAmount);
				$orderItem->setCurrency($currency);
				$orderItem->setTotal($orderAmount);
			}
			
			$order->setBillingAddress($billingAddress);
			if ($product->isShippable())
			{
				$order->setShippable(true);
				$order->setShippingAddress($shippingAddress);
			}
			$order->setPaymentMethod($this);
			
			//add affiliate
			if (!empty($affId))
			{
				$order->setAffiliateId($affId);
			}
			$order->setOrderStatus(MM_ORDER::$PAID_COMPLETE);
			$orderCreationResponse = $order->commitData();
			
			if (MM_Response::isError($orderCreationResponse))
			{
				throw new Exception($orderCreationResponse->message); //have to bail on error because without an order, there is nothing to link a transaction to
			}
			
			//order is created, now log the transaction
			$transactionDescription = $transactionDescription = "Payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
			MM_TransactionLog::createTransactionEntry($order->getId(), $orderItem->getId(), $order->getTotal(), $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,false,$this->id,$ipnId);
			
			//now link the ctransreceipt to the order item id. ctransreceipt stays constant throughout future rebills, so its an effective way to keep track of a product
			$linkData = array("order_item_id" => $orderItem->getId());
			$wpdb->update(MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS, $linkData, array("ctransreceipt" => $cbReceipt));
			
			//now assign any access granted by the order
			$accessResponse = MM_AccessControlEngine::assignAccessFromOrder($order);
			if (MM_Response::isError($accessResponse))
			{
				$accessResponse->message = "Error assigning access order with order id {$order->getId()}: {$accessResponse->message}";
				return $accessResponse;
			}
			return new MM_Response($order);
		}
		catch (Exception $e)
		{
			//we need to know if anything went wrong, so we can delete the placeholder
			$wpdb->query($wpdb->prepare("DELETE FROM ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." WHERE ctransreceipt=%s AND order_item_id = 0",$cbReceipt));
			return new MM_Response($e->getMessage(),MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Logs a ClickBank IPN request.
	 *
	 * @param array $request This is an array containing the IPN variables, typically identical to $_POST
	 * @return MM_Response containing the id of the row in the IPN log table if successful, or an error message if failed
	 */
	private function logIPN($request)
	{
		global $wpdb;
		
		$required = array("ctransreceipt","ctransaction");
		$missing = array();
		foreach ($required as $k)
		{
			if (empty($request[$k]))
			{
				$missing[] = $k;
			}
		}
		
		if (count($missing) > 0)
		{
			$missingString = implode(",",$missing);
			return new MM_Response("Could not log ClickBank IPN because the following required fields were missing:".$missingString,MM_Response::$ERROR);
		}
		
		$ipnData = array("ctransreceipt"      =>   $request['ctransreceipt'],
						 "cupsellreceipt"     =>   $request['cupsellreceipt'],
						 "ctransaction"       =>   $request['ctransaction'],
						 "corderamount"       =>   $request['corderamount'],
						 "ctransaffiliate"    =>   $request['ctransaffiliate'],
						 "crebillamnt"        =>   $request['crebillamnt'],
						 "cprocessedpayments" =>   $request['cprocessedpayments'],
						 "cfuturepayments"    =>   $request['cfuturepayments'],
						 "cnextpaymentdate"   =>   $request['cnextpaymentdate'],
						 "crebillstatus"      =>   $request['crebillstatus'],
						 "ctranstime"         =>   $request['ctranstime']
		);
		
		$ipnData['recurring'] = 0;
		if (!empty($request['cprodtype']) && (strtoupper($request['cprodtype']) == "RECURRING"))
		{
			$ipnData['recurring'] = 1;
		}
		
		$ipnData['date_received'] = MM_Utils::getCurrentTime();
		$result = $wpdb->insert(MM_TABLE_CLICKBANK_IPN_LOG,$ipnData);
		if ($result === false)
		{
			return new MM_Response("Could not log ClickBank IPN to the database",MM_Response::$ERROR);
		}
		return new MM_Response($wpdb->insert_id);
	}
	
	
	/**
	 * Charge an order. Not supported with ClickBank
	 * 
	 * @param MM_Order $order The order to charge
	 * @param MM_CardInfo $cardInfo The credit card information to use in charging the order
	 * @return MM_PaymentServiceResponse An object representing the status of the charge attempt. In this case, it will always be an error object
	 */
	public function chargeOrder(MM_Order $order, MM_CardInfo $cardInfo=null, $validate=true) 
	{ 
		return new MM_PaymentServiceResponse("ClickBank orders must be initiated through ClickBank",MM_PaymentServiceResponse::$ERROR);
	}		
	
	
	/**
	 * Updates the payment gateway with new information, and update the MemberMouse order with the new billing address
	 * Not supported for ClickBank; this method responds with an error and a message directing the user to the proper ClickBank url
	 * @see MM_PaymentService::updateSubscriptionInfo()
	 * 
	 * @param MM_OrderItem $orderItem The order item representing the subscription being updated
	 * @param MM_CardInfo $cardInfo (optional) The new card to store on file
	 * @param MM_CustomerAddress $billingAddress The new billing address to store. Should be the address associated with the customer's card on file
	 * 
	 * @return MM_PaymentServiceResponse representing success or error. Contains a descriptive error message on error
	 * 
	 */
	public function updateSubscriptionInfo(MM_OrderItem $orderItem, MM_CardInfo $cardInfo=null, MM_CustomerAddress $billingAddress=null) 
	{
		$clickbankUrl = "https://www.clkbank.com/clkbank.htm";
		$errorMessage = "To update payment information, use the ClickBank interface at {$clickbankUrl}";
		return new MM_PaymentServiceResponse($errorMessage,MM_PaymentServiceResponse::$ERROR);
	}	
	
	
	/**
	 * Cancels the user's subscription. 
	 * @see MM_PaymentService::cancelSubscription()
	 * 
	 * @param MM_OrderItem $orderItem The product item whose subscription is being cancelled
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	public function cancelSubscription(MM_OrderItem $orderItem) 
	{
		if (!$orderItem->isValid())
		{
			return new MM_PaymentServiceResponse("Could not cancel subscription: invalid order item supplied",MM_PaymentServiceResponse::$ERROR);
		}
		$receiptNumber = $this->lookupReceiptFromOrderItemId($orderItem->getId());
		$opResponse = $this->doCancelOrRefund($receiptNumber, "CNCL");
		if (MM_Response::isError($opResponse))
		{
			if (($opResponse instanceof MM_Response) && ($opResponse->getData("http_code")))
			{
				$opResponse->message = "Error cancelling subscription; This can mean that your API keys don't have the permissions required to perform this operation, or that the subscription could not be located in ClickBank. Please try cancelling manually from the ClickBank interface";
			}
			return new MM_PaymentServiceResponse($opResponse->message,MM_PaymentServiceResponse::$ERROR);
		}
		if ($orderItem->isRecurring())
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
			$orderItem->commitData();
		}
		MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
		return new MM_PaymentServiceResponse();
	}
	
	
	/**
	 * Refunds a transaction
	 * 
	 * @param integer $transactionId The MemberMouse transaction to refund
	 * @return MM_PaymentServiceResponse indicating success, failure, or error
	 */
	public function refundTransaction($transactionId)
	{
		global $wpdb; 
		
		if (empty($transactionId))
		{
			return new MM_PaymentServiceResponse("Could not refund transaction: invalid order item supplied",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure the transaction exists
		$transactionLookupResponse = MM_TransactionLog::getTransactionInfo($transactionId);
		if (MM_Response::isError($transactionLookupResponse))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, transaction does not exist",MM_PaymentServiceResponse::$ERROR);
		}
		
		$transactionRow = $transactionLookupResponse->message;
		
		//make sure its not already refunded
		if (!is_null($transactionRow->refund_id))
		{
			return new MM_PaymentServiceResponse("Transaction has already been refunded",MM_PaymentServiceResponse::$ERROR);
		}
		
		
		$lookupSQL = "SELECT ctransreceipt FROM ".MM_TABLE_CLICKBANK_ORDER_ITEM_LINKS." WHERE order_item_id='{$transactionRow->order_item_id}'";
		$receiptNumber = $wpdb->get_var($lookupSQL);
		
		$opResponse = $this->doCancelOrRefund($receiptNumber, "RFND");
		if (MM_Response::isError($opResponse))
		{
			if (($opResponse instanceof MM_Response) && ($opResponse->getData("http_code")))
			{
				$opResponse->message = "Error refunding transaction; This can mean that your API keys don't have the permissions required to perform this operation, or that the transaction doesn't exist. Please try attempting this refund manually from the ClickBank interface";
			}
			return new MM_PaymentServiceResponse($opResponse->message,MM_PaymentServiceResponse::$ERROR);
		}
		
		//refund was success for execution to reach this point, log it in the transaction table
		$transactionDescription = "Refund for transaction# {$transactionRow->id}";
		$refundTransactionResponse = MM_TransactionLog::createTransactionEntry($transactionRow->order_id,
				$transactionRow->order_item_id,
				$transactionRow->amount,
				$transactionRow->currency,
				$transactionDescription,
				MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
				false,
				$this->getId(),
				"",
				MM_Utils::getCurrentTime(),
				$transactionRow->id);
		
		if (MM_Response::isSuccess($refundTransactionResponse))
		{
			$wpdb->query($wpdb->prepare("UPDATE ".MM_TABLE_TRANSACTION_LOG." SET refund_id = %s WHERE id = %s",$refundTransactionResponse->message,$transactionRow->id));
		}
		
		//issuing a ClickBank refund also cancels the subscription
		$orderItem = new MM_OrderItem($transactionRow->order_item_id);
		if ($orderItem->isRecurring())
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
			$orderItem->commitData();
		}
		
		$accessResponse = MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
		if (MM_Response::isError($accessResponse))
		{
			return MM_PaymentServiceResponse::translate($accessResponse);
		}
		return MM_PaymentServiceResponse::translate($refundTransactionResponse);
	}
	
	
	/**
	 * Calls the ClickBank ticket API to open a ticket to issue a cancellation or refund (the same api endpoint handles both)
	 * 
	 * @param string $receiptNumber The ClickBank
	 * @param string $type A string containing the value RFND or CNCL indicating the operation to perform
	 * @param float $amount The dollar amount to refund. Must be the dollar amount of the original receipt
	 * 
	 * @return MM_Response containing the created ClickBank TicketData object on success or an error message on failure
	 */
	protected function doCancelOrRefund($receiptNumber,$type)
	{
		if (empty($receiptNumber))
		{
			return new MM_Response("Error performing cancel/refund: No receipt number supplied",MM_Response::$ERROR);
		}
		
		$type = strtoupper($type);
		if ($type == "RFND")
		{
			$reason = "ticket.type.refund.8"; //reason type is set to "other" because we don't have access to that information
		}
		else if ($type == "CNCL")
		{
			$reason = "ticket.type.cancel.7"; //other
		}
		else
		{
			return new MM_Response("Error performing cancel/refund: Invalid operation requested",MM_Response::$ERROR);
		}
		
		$queryFields = array("type"=>$type,"reason"=>$reason,"refundType"=>"FULL");
		$queryString = http_build_query($queryFields);
		
		$endpoint = "{$this->getAPIUrl()}/tickets/{$receiptNumber}?{$queryString}";
		$crResponse = $this->doHTTPRequest($endpoint,"POST",array(),$this->getClickbankJSONAPIHeaders());
		if (MM_Response::isError($crResponse))
		{
			return $crResponse;
		}
		$responseObj = json_decode($crResponse->message);
		if ($responseObj === false)
		{
			return new MM_Response("Error communicating with ClickBank",MM_Response::$ERROR);
		}
		return new MM_Response($responseObj);
	}
	
	
	public function displayPaymentForm(MM_Order $order)
	{
		$orderProductItems = $order->getProducts();
		
		foreach ($orderProductItems as $eachProductItem)
		{
			$product = new MM_Product($eachProductItem->getItemId());
			
			if($product->isValid())
			{
				break;
			}
		}
		
		$templateData = new stdClass();
		$templateData->form_destination = mm_purchase_link(array("productId"=>$product->getId(), "paymentMethod"=>"clickbank"));
		
		$html= MM_TEMPLATE::generate("{$this->getTemplateDir()}/clickbank_payment_form.html.php",$templateData);
		return $html;
	}
	
	
	public function getAPIDeveloperKey()
	{
		return $this->apiDeveloperKey;
	}
	
	
	public function setAPIDeveloperKey($apiDeveloperKey)
	{
		$this->apiDeveloperKey = $apiDeveloperKey;
	}
	
	
	public function getAPIClerkKey()
	{
		return $this->apiClerkKey;
	}
	
	
	public function setAPIClerkKey($apiClerkKey)
	{
		$this->apiClerkKey = $apiClerkKey;
	}
	
	
	public function getSecretKey()
	{
		return $this->secretKey;
	}
	
	
	public function setSecretKey($secretKey)
	{
		$this->secretKey = $secretKey;
	}
	
	
	public function getSiteName()
	{
		return $this->siteName;
	}
	
	
	public function setSiteName($siteName)
	{
		$this->siteName = $siteName;
	}
	
	
	public function getFallbackConfirmationPage()
	{
		if(!empty($this->fallbackConfirmationPage))
		{
			return $this->fallbackConfirmationPage;
		}
		else
		{
			return site_url();
		}
	}
	
	
	public function setFallbackConfirmationPage($confirmationPage)
	{
		$this->fallbackConfirmationPage = $confirmationPage;
	}
	
	
	private function getAPIUrl()
	{
		return "https://api.clickbank.com/rest/1.3";
	}
	
	
	/**
	 * Overrides the parent curl request method to translate the "access is denied" response ClickBank returns into an error type
	 * All other functionality is the same as the superclass method
	 * 
	 * @see MM_PaymentService::doHTTPRequest()
	 */
	protected function doHTTPRequest($remoteUrl, $method="POST", $data="", $options=array())
	{
		$response = parent::doHTTPRequest($remoteUrl,$method,$data,$options);
		$opStatus = MM_Response::isSuccess($response);
		$opStatus = ($opStatus && (($response instanceof MM_Response) && ($response->getData("http_code") != "403"))); //forbidden status is a failure, but returns a result 
		$opStatus = ($opStatus && (strpos(strtolower($response->message),"access is denied") === false));
		if (!$opStatus)
		{
			$response->type = MM_Response::$ERROR;
		}
		return $response;
	}
	
	
	/**
	 * Constructs a ClickBank purchase link for the supplied product id
	 * @see MM_PaymentService::getPurchaseLink()
	 * 
	 * @param string $productId The membermouse product id to construct a purchase link for
	 * @return A string containing the purchase link on success, null on failure
	 */
	public function getPurchaseLink($productId) 
	{
		global $wpdb;
		
		$lookupQuery = "SELECT clickbank_product_id FROM ".MM_TABLE_CLICKBANK_PRODUCT_LINKS." WHERE membermouse_product_id = %s";
		$clickbankPID = $wpdb->get_var($wpdb->prepare($lookupQuery,$productId));
		if (is_null($clickbankPID))
		{
			return null;
		}
		$purchaseLink = "http://{$clickbankPID}.{$this->getSiteName()}.pay.clickbank.net";
		return $purchaseLink;
	}
}
