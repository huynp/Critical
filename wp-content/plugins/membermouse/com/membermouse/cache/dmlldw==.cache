/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */
abstract class MM_View
{ 
    public static $MM_NONCE_ACTION_CHECKOUT_FORM = "mm-checkout";
    public static $MM_NONCE_NAME_CHECKOUT_FORM   = "mm-security";
	
	public static $MM_JSACTION = "mm_action";
	public static $MM_JSMODULE = "mm_module";
	public static $MM_JSACTION_SAVE = "save";
	public static $MM_JSACTION_REMOVE = "remove";
	public static $MM_JSACTION_SHOW_DIALOG = "showDialog";
	public static $MM_JSACTION_REFRESH_VIEW = "refreshView";
	public static $MM_JSACTION_SHOW_BUY_NOW_LINKS = "showPurchaseLinks";
	public static $MM_JSACTION_VALIDATE_INPUT = "validateInput";
	public static $MM_JSACTION_LOGIN = "login";
	public static $MM_JSACTION_RESET_PASSWORD = "resetPassword";
	public static $MM_JSACTION_LOAD_STATES = "loadStates";
	
	//for use in subclasses implementing rbac. array structure has method names as keys, 
	//and arrays containing valid roles (from MM_Role) as the values
	protected $permissions = array();
	
	function __construct()
 	{
 		// do nothing
 	}
 	
 	public function callMethod($post) 
 	{
 		if (isset($post["method"]) && method_exists($this, $post["method"]) && $this->canCallMethod($post['method'])) 
		{
			$method = $post['method'];
			return $this->$method($post);
		}		
		return 0;
 	}
 	
 	
 	/**
 	 * Determines if the caller has permission to perform the requested action
 	 * 
 	 * @param string $methodName
 	 * @return boolean
 	 */
 	public function canCallMethod($methodName)
 	{
 		return true;	
 	}
 	
	
	public function performAction($post) 
	{	
		if(isset($post[self::$MM_JSACTION])) 
		{
			switch($post[self::$MM_JSACTION]) 
			{
				case self::$MM_JSACTION_REFRESH_VIEW:
					return $this->refreshView($post);
				
				case self::$MM_JSACTION_SHOW_DIALOG:
					return $this->showDialog($post);
					
				case self::$MM_JSACTION_LOAD_STATES:
					return $this->loadStates($post);
				
				case self::$MM_JSACTION_VALIDATE_INPUT:
					return $this->validateInput($post);
					
				default:
					return "";
			}
		}
		else 
		{
			return new MM_Response("MM_View.performAction(): '".self::$MM_JSACTION."' is required", MM_Response::$ERROR);
		}
	}

	protected function validateInput($post)
  	{
		global $wpdb;
	  
		try
		{	 
			switch($post['input_type'])
			{
				case 'EMAIL':
					foreach(preg_split("/[ ,]+/", $post['input_value']) as $email)
					{
						$email = trim($email);

						if(!$email)
						{
							throw new Exception("Provided email address was empty, please provide a valid email address");
						}

						if(!is_email($email))
						{
							throw new Exception("Invalid email address ({$email}) entered for {$post['input_label']}");
						}
					}
					break;

				case 'URL':
					if(!filter_var($post['input_value'], FILTER_VALIDATE_URL) || !preg_match("/^https?:\/\//", $post['input_value']))
					{
						throw new Exception("Invalid URL ({$post['input_value']}) entered for {$post['input_label']}");
					}
					break;

				default:
					throw new Exception("Invalid Input Type requesting validation...");
					break;
			}
    	} 
    	catch(Exception $e)
    	{
      	return new MM_Response($e->getMessage(), MM_Response::$ERROR);
    	}
    
    	return new MM_Response();
	}
 	
	private function showResponseDialog($post)
	{
		$info->message = (!isset($post["message"]))?"Oh, something bad happened":$post["message"];
 		$msg = MM_TEMPLATE::generate(MM_MODULES."/response.php", $info);
 		return new MM_Response($msg);
	}
	
	protected function refreshView($post)
	{
		$crntModule = $this->getModule($post, $post[self::$MM_JSACTION]);
		
		if($crntModule != "") 
		{
			$_REQUEST["module"] = $crntModule;
			
			ob_start();
			include($module=MM_MODULES."/".$crntModule.".php");
			$contents = ob_get_contents();
			ob_end_clean();
			return $contents;
		}
		else 
		{
			return "MM_View.refreshView(): requested module does not exist".$post[self::$MM_JSMODULE];
		}
	}
	
	protected function showDialog($post)
	{
		$info = new stdClass();
		
		foreach($post as $key=>$value)
		{
			$info->$key = $value;
		}
		
		if(!isset($info->id)) 
		{
			$info->id = "";
		}
		
		$crntModule = $this->getModule($post);
		
		if($crntModule != "") 
		{
			return MM_TEMPLATE::generate(MM_MODULES."/".$crntModule.".dialog.php", $info);
		}
		else 
		{
			return new MM_Response("MM_View.showDialog(): ".self::$MM_JSMODULE." requested module does not exist", MM_Response::$ERROR);
		}
	}
	
	private function getModule($post, $action="")
	{	
		if($this instanceof MM_MembershipLevelsView) 
		{
			return MM_MODULE_MEMBERSHIP_LEVELS;
		}
		else if($this instanceof MM_CommissionProfilesView) 
		{
			return MM_MODULE_COMMISSION_PROFILES;
		}
		else if($this instanceof MM_LimeLightProductsView) 
		{
			return MM_MODULE_LIMELIGHT_PRODUCTS;
		}
		else if($this instanceof MM_LimeLightShippingMethodsView) 
		{
			return MM_MODULE_LIMELIGHT_SHIPPING_METHODS;
		}
		else if($this instanceof MM_ApiView) 
		{
			return MM_MODULE_API;
		}
		else if($this instanceof MM_ProductView) 
		{
			return MM_MODULE_PRODUCTS;
		}
		else if($this instanceof MM_ActivityLogView) 
		{
			return MM_MODULE_ACTIVITY_LOG;
		}
		else if($this instanceof MM_PayPalIPNLogView) 
		{
			return MM_MODULE_PAYPAL_IPN_LOG;
		}
		else if($this instanceof MM_TransactionHistoryView) 
		{
			return MM_MODULE_MEMBER_DETAILS_TRANSACTION_HISTORY;
		}
		else if($this instanceof MM_SubscriptionsView) 
		{
			return MM_MODULE_MEMBER_DETAILS_SUBSCRIPTIONS;
		}
		else if($this instanceof MM_GiftHistoryView) 
		{
			return MM_MODULE_MEMBER_DETAILS_GIFT_HISTORY;
		}
		else if($this instanceof MM_DripContentScheduleView)
		{
			return MM_MODULE_DRIP_CONTENT_SCHEDULE;
		}
		else if($this instanceof MM_CouponView) 
		{
			return MM_MODULE_COUPONS;
		}
		else if($this instanceof MM_PushNotificationView) 
		{
			return MM_MODULE_PUSH_NOTIFICATIONS;
		}
		else if($this instanceof MM_CustomFieldView) 
		{
			return MM_MODULE_CUSTOM_FIELDS;
		}
		else if($this instanceof MM_BundlesView) 
		{
			return MM_MODULE_BUNDLES;
		}
		else if($this instanceof MM_EmployeesView) 
		{
			return MM_MODULE_EMPLOYEES;
		}
		else if($this instanceof MM_MembersView) 
		{	
			return MM_MODULE_BROWSE_MEMBERS;
		}
		else if($this instanceof MM_MemberDetailsView && $action == MM_MemberDetailsView::$MM_JSACTION_UPDATE_MEMBER)
		{
			return MM_MODULE_MEMBER_DETAILS_GENERAL;
		}
		else if($this instanceof MM_AccessRightsView || $this instanceof MM_CorePagesView) 
		{
			return MM_MODULE_META;
		}
		else if($this instanceof MM_DashboardView) 
		{
			return MM_MODULE_DASHBOARD;
		}
		else if($this instanceof MM_EmailIntegrationView) 
		{
			return MM_MODULE_EMAIL_INTEGRATION;
		}
		else if($this instanceof MM_ShippingMethodsView)
		{
			return MM_MODULE_SHIPPING;
		}
		else if($this instanceof MM_DuplicateSubscriptionsView)
		{
			return MM_MODULE_DUPLICATE_SUBSCRIPTION_TOOL;
		}
		else if ($this instanceof MM_DiagnosticsView)
		{
			return MM_MODULE_DIAGNOSTICS;
		}
		else if ($this instanceof MM_SafeModeView)
		{
			return MM_MODULE_SAFE_MODE;
		}
		else if ($this instanceof MM_RepairCorePagesView)
		{
			return MM_MODULE_REPAIR_CORE_PAGES;
		}
		else if ($this instanceof MM_UserDefinedPageView)
		{
			return MM_MODULE_USER_DEFINED_PAGES;
		}
		else 
		{
			if(isset($post[self::$MM_JSMODULE])) 
			{
				return $post[self::$MM_JSMODULE];
			} 
			else 
			{
				return "";
			}
		}
	}
	
	public function uploadFile() 
	{
		$error = "";
		$msg = "";
		$fileElementName = 'fileToUpload';
		
		if(!empty($_FILES[$fileElementName]['error']))
		{
			switch($_FILES[$fileElementName]['error'])
			{
	
				case '1':
					$error = 'The uploaded file exceeds the upload_max_filesize directive in php.ini';
					break;
					
				case '2':
					$error = 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form';
					break;
					
				case '3':
					$error = 'The uploaded file was only partially uploaded';
					break;
					
				case '4':
					$error = 'No file was uploaded';
					break;
	
				case '6':
					$error = 'Missing a temporary folder';
					break;
					
				case '7':
					$error = 'Failed to write file to disk';
					break;
					
				case '8':
					$error = 'File upload stopped by extension';
					break;
					
				case '999':
				default:
					$error = 'No error code avaiable';
			}
		}
		elseif(empty($_FILES['fileToUpload']['tmp_name']) || $_FILES['fileToUpload']['tmp_name'] == 'none')
		{
			$error = 'No file was uploaded';
		} 
		else 
		{
				$msg .= " File Name: " . $_FILES['fileToUpload']['name'] . ", ";
				$msg .= " File Size: " . @filesize($_FILES['fileToUpload']['tmp_name']);
				
				//for security reasons, we force the removal of all uploaded files
				$overrides = array('test_form' => false);
				$file=wp_handle_upload($_FILES['fileToUpload'], $overrides);
				
				@unlink($_FILES['fileToUpload']);
				
				$fileExists = false;
				if(file_exists($file['file'])){
					$fileExists = true;	
				}
				
				if(!isset($file["error"]) && isset($file["url"]) && $fileExists) {
					echo "<script type='text/javascript'>top.mmjs.stopUpload('1','".$file["url"]."','".$file["file"]."');</script>";
				} 
				else if(!$fileExists){
					echo "<script type='text/javascript'>top.mmjs.stopUpload('0','".preg_replace("/[\'\"]+/","", "File was not uploaded successfully, please check directory permissions.")."');</script>";
				}
				else {
					echo "<script type='text/javascript'>top.mmjs.stopUpload('0','".preg_replace("/[\'\"]+/","", $file["error"])."');</script>";	
				}
		}
	}
 	
 	public function getData($tableName, $fields=null, MM_DataGrid $dg=null, $where = "", $getTotal=false)
 	{
		global $wpdb;
		
		$columns = (is_null($fields)) ? "tbl.*" : implode(",", $fields);
		
 		$sqlResultCount = "SELECT count(distinct id) as total FROM ".$tableName;
		if(!empty($where))
		{
			if(preg_match("/^(where)/", strtolower(trim($where))))
			{
				$sqlResultCount.= " {$where} ";
			}	
			else
			{
				$sqlResultCount.= " where {$where} ";
			}
		}
		
		$countRow = $wpdb->get_row($sqlResultCount);
		
		if($countRow) 
		{
			$sql = "SELECT '{$countRow->total}' as total, ".$columns." FROM ".$tableName." as tbl ";
		}
		else 
		{
			$sql = "SELECT ".$columns." FROM ".$tableName." as tbl ";
		}
		
		if(!empty($where))
		{
			if(preg_match("/^(where)/", strtolower(trim($where))))
			{
				$sql.= " {$where} ";
			}	
			else
			{
				$sql.= " where {$where} ";
			}
		}
		
		if(!is_null($dg) && !is_null($dg->sortBy) && !empty($dg->sortBy)) 
		{
			$sql.= "ORDER BY {$dg->sortBy} {$dg->sortDir}";
		}
		
		if($getTotal)
		{
			$result = $wpdb->get_results($sql);
			return $result;
		}
		
		if(!is_null($dg)) 
		{
			$sql .= $dg->getLimitSql();
		}

		$result = $wpdb->get_results($sql);
		
		if(!$result || is_null($result)) 
		{
			return array();
		}
		
		return $result;
 	}
 	
 	protected function checkAjaxReferer($action, $name)
	{
		// For now, we're disabling this, always return true
		return true;
  		//return check_ajax_referer( $action, $name, false );
	}
	
	public function loadStates($post)
	{
		global $current_user;
		
		try
		{
			if(!$this->checkAjaxReferer(MM_CheckoutView::$MM_NONCE_ACTION_CHECKOUT_FORM, MM_CheckoutView::$MM_NONCE_NAME_CHECKOUT_FORM))
	      {
	      	throw new Exception("Failed Ajax Referrer Check");  
	      }
		
			if(!isset($post['country']) || !$post['country'])
			{
				throw new Exception("Missing country ISO code");
			}
		
			if(!is_array($states = MM_CountrySubdivisionUtils::getCountrySubdivsionList(array($post['country']))))
			{
				throw new Exception("No states found for ISO code: {$post['country']}");
			}
			
			$defaultState 	 = null;
			$defaultCountry = null;
			
			if(is_user_logged_in())
			{
				$stateFunction   = $post['type'] == "billing" ? "getBillingState" : "getShippingState";
				$countryFunction = $post['type'] == "billing" ? "getBillingCountry" : "getShippingCountry";
				$user 			  = new MM_User($current_user->ID);
				$defaultState 	  = $user->$stateFunction() ? $user->$stateFunction() : null;
				$defaultCountry  = $user->$countryFunction() ? $user->$countryFunction() : null;
			}
			
			$options = "";
			$count   = 0;
			foreach($states[$post['country']] as $state_iso => $state_name)
			{	
				if(is_user_logged_in())
				{	
					if(isset($states[$defaultCountry][$defaultState]))
					{
						$selected = $defaultState == $state_iso;
					}
					else
					{
						$selected = $count === 0;
					}
				}
				else
				{
					$selected = $count === 0;
				}
				
				$options .= "<option value='{$state_iso}'" . ($selected ? " selected='selected'" : "") . ">{$state_name}</option>\n";
				$count++;
			}
			$options .= "<option value='-1'>Other...</option>\n";
			
	      $MM_Response = new MM_Response();
			$MM_Response->data['html'] = $options;
			$MM_Response->data['type'] = $post['type'] ? $post['type'] : 'billing';
      
	      return $MM_Response;
		}	
      catch(Exception $e)
      {
	   	$MM_Response = new MM_Response($e->getMessage(), MM_Response::$ERROR);
	      return $MM_Response;
      }
		
	}
}
