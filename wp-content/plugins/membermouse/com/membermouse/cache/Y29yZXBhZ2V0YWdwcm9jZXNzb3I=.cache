class MM_CorePageTagProcessor
{	
	public static $TAG_CORE_PAGE_LINK = "mm_corepage_link";
	
	
	/**
	 * Takes a SmartTag string and returns true if the SmartTag is related to core pages.
	 * 
	 * @param String $smartTag the name of the SmartTag
	 * @return Boolean returns true if the SmartTag passed is related to core pages.
	 */
	public static function isCorePageSmartTag($smartTag)
	{
		switch($smartTag) 
		{
			case self::$TAG_CORE_PAGE_LINK:
				return true;
				
			default:
				return false;
		}
	}
	
	
	/**
	 * Takes a SmartTag name and a number of properties related to the SmartTag and makes a call to 
	 * the appropriate function based on the SmartTag name.
	 * @param String $smartTag the name of the SmartTag
	 * @param String $content the content to process
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function processSmartTag($smartTag, $content, $atts, $code)
	{
		switch($smartTag) 
		{
			case self::$TAG_CORE_PAGE_LINK:
				return self::mm_corepage_link($content, $atts, $code);
				
			default:
				return "Invalid Core Page SmartTag {$smartTag} found.";
		}
	}
	
	
	/**
	 * This function processes the MM_CorePage_Link tag. It is responsible for 
	 * returning a link to the appropriate core page based on the type attribute.
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function mm_corepage_link($content, $atts, $code)
	{
		if(is_array($atts) && count($atts) > 0)
		{
			foreach($atts as $k=>$v)
			{
				$key = strtolower($k);
				$$key = $v;
			}
		}
		
		if(isset($type))
		{
			$currentUser = MM_SmartTagUtil::getCurrentUser();
			$url = "";
			
			switch(strtolower($type))
			{
				case "login":
					$url = MM_CorePageEngine::getUrl(MM_CorePageType::$LOGIN_PAGE, null);
					break;
					
				case "logout":
					$url = wp_logout_url();
					break;
					
				case "homepage":
					$url = MM_CorePageEngine::getUrl(MM_CorePageType::$MEMBER_HOME_PAGE, null, $currentUser);
					break;
					
				case "forgotpassword":
					$url = MM_CorePageEngine::getUrl(MM_CorePageType::$FORGOT_PASSWORD, null);
					break;
				
				case "resetpassword":
					$url = MM_CorePageEngine::getUrl(MM_CorePageType::$RESET_PASSWORD, null);
					$url = MM_Utils::appendUrlParam($url, MM_ResetPasswordFormView::$MM_PARAM_KEY_KEY, $currentUser->getForgotPasswordHash());
					$url = MM_Utils::appendUrlParam($url, MM_ResetPasswordFormView::$MM_PARAM_KEY_EMAIL, MM_MemberMouseService::encryptPassword($currentUser->getEmail()));
					break;
					
				case "myaccount":
					$url = MM_CorePageEngine::getUrl(MM_CorePageType::$MY_ACCOUNT, null);
					break;
					
				case "savethesale":
					$url = MM_CorePageEngine::getUrl(MM_CorePageType::$SAVETHESALE, null, $currentUser);
					break;
					
				default:
					return "Invalid SmartTag Configuration: The 'type' attribute '{$type}' is invalid for SmartTag {$code}.";
			}
			
			if(!empty($url) && isset($autologin) && $autologin == "true")
			{
				// generate a login token
				if($currentUser->isValid())
				{
					$loginTokenResponse = MM_LoginToken::generateToken($currentUser->getId());
						
					if (MM_Response::isSuccess($loginTokenResponse))
					{
						$loginToken = $loginTokenResponse->message;
						$url = MM_Utils::appendUrlParam($url, MM_Session::$PARAM_LOGIN_TOKEN, $loginToken);
					}
				}
			}
			
			return $url;
		}
		else
		{
			return "Invalid SmartTag Configuration: The 'type' attribute is required for SmartTag {$code}.";
		}
	}
}
