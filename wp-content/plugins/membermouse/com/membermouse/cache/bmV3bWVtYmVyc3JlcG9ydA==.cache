/**
 *
* MemberMouse(TM) (http://www.membermouse.com)
* (c) MemberMouse, LLC. All rights reserved.
*/
class MM_NewMembersReport extends MM_ReportBase 
{
	
	public static $NEW_MEMBERS_DATAGRID = "new_members_datagrid";
	public static $NEW_MEMBERS_PIECHART = "new_members_piechart";
	
	protected $visualElements = array("MM_ReportDataGrid","MM_ReportPieChart");
	
	//query identifiers
	public static $NEW_MEMBERS_BY_DATE_QUERY = "new-members-by-date";
	
	
	public function renderVisualElement($elementIdentifier, $params = '', $width = '', $height = '', $directives=array()) 
	{
		switch ($elementIdentifier)
		{
			case self::$NEW_MEMBERS_PIECHART:
				return $this->renderNewMembersPiechart($elementIdentifier, $params, $width, $height, $directives);
				break;
			case self::$NEW_MEMBERS_DATAGRID:
				return $this->renderNewMembersDatagrid($elementIdentifier, $params, $width, $height, $directives);
				break;
			default:
				return new MM_ReportResponse("Unable to render visual element: identifier ".((!is_array($elementIdentifier) && !is_object($elementIdentifier))?"{$elementIdentifier} ":"")."unknown",MM_ReportResponse::$ERROR);
		}
	}
	
	
	/**
	 * 
	 * @param string $elementIdentifier
	 * @param string $width
	 * @param string $height
	 * @param string $params
	 * @return MM_ReportResponse containing the datagrid if it is renderable, not-ready status if the data is available, or error if there was an error
	 */
	public function renderNewMembersDatagrid($elementIdentifier, $params = '', $width = '', $height = '', $directives=array())
	{
		$dataResponse = MM_ReportDataRetriever::requestData(get_class($this), self::$NEW_MEMBERS_BY_DATE_QUERY, $params);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		
		$rowIndex = "Date";
		
		if (isset($params['type']))
		{
			switch ($params['type'])
			{
				case 'weekly':
					$rowIndex = "Week of";
					break;
				case 'monthly':
					$rowIndex = "Month";
					break;
				case 'yearly':
					$rowIndex = "Year";
					break;
				default:
					$rowIndex = "Date";
					break;
			}
		}
		
		//data is ready, construct the grid model, starting with the headers
		$resultset   = $dataResponse->message;
		$gridHeaders = array("date"=>array('label'=>$rowIndex, 'sortable'=>true, 'sortValueColumn'=>'date_sort_value'));
		
		//there is a column for each membership level. We could query this data again, but faster to just extract it from the first row of the resultset
		$firstRow = reset($resultset);
		foreach ($firstRow as $k=>$v)
		{	
			if (($k != "date") && ($k != 'date_sort_value'))
			{
				$gridHeaders[$k] = array('label'=>$k);
			}
		}
		
		$grid = MM_ReportDatagrid::createFromData(self::$NEW_MEMBERS_DATAGRID, $gridHeaders, $dataResponse,$directives);
		//$grid->setGridTitle("Member Count");
		$grid->setShowHeaderRow(false);
		
		return new MM_ReportResponse($grid->render());
	}
	
	
	public function renderNewMembersPiechart($elementIdentifier, $params = '', $width = '', $height = '', $directives=array())
	{
		$dataResponse = MM_ReportDataRetriever::requestData(get_class($this), self::$NEW_MEMBERS_BY_DATE_QUERY, $params);
		if (!MM_ReportResponse::isSuccess($dataResponse))
		{
			return $dataResponse;
		}
		$resultset = $dataResponse->message;
		$chartData = new MM_ReportPiechartModel();
		$chartData->addSlice("Test1", 25);
		$chartData->addSlice("Test2",75);
		$pieChart = new MM_ReportPieChart(self::$NEW_MEMBERS_PIECHART);
		$renderedChart = $pieChart->render($chartData);
		return new MM_ReportResponse($renderedChart);
	}
	
	
	/**
	 * Generate the data for the New Member By Date report. All four datasets for the supplied date range 
	 * are generated. The datasets are daily, weekly, monthly and yearly
	 * Constraint: The supplied params must contain a start and end date
	 * 
	 * @param array $params
	 * @return MM_Response containing all four datasets on success
	 */
	public static function generateNewMembersByDateData($params)
	{
		global $wpdb;
		
		if (!is_array($params))
		{
			return new MM_Response("Could not generate Member Count data: Improper parameters format",MM_Response::$ERROR);
		}
		
		if (empty($params['start_date']) || empty($params['end_date']))
		{
			return new MM_Response("Could not generate Member Count data: Start and End date must be supplied",MM_Response::$ERROR);
		}
		
		$userDataTable = MM_TABLE_USER_DATA;
		
		$startTime = is_int($params['start_date'])?$params['start_date']:strtotime($params['start_date']);
		$endTime = is_int($params['end_date'])?$params['end_date']:strtotime($params['end_date']);
		
		$startDate = date("Y-m-d H:i:s",$startTime); //mysql format
		$endDate =   date("Y-m-d H:i:s",$endTime);
		
		$mlFilters = array();
		$mlFilterString = "";
		$filtersPresent = false;
		
		if (isset($params['membership_levels']) && is_array($params['membership_levels']) && (count($params['membership_levels']) > 0))
		{
			$filtersPresent = true;
			foreach ($params['membership_levels'] as $v)
			{
				if (is_numeric($v))
				{
					$mlFilters[] = $wpdb->prepare("%d",$v);
				}
			}
			$mlFilterString = implode(',',$mlFilters);
		}
			
		//load membership levels into a lookup table (in memory)
		$membershipSQLWhere = $filtersPresent?" WHERE id IN ({$mlFilterString}) ":"";
		$membershipSQL = "SELECT id, name FROM ".MM_TABLE_MEMBERSHIP_LEVELS." {$membershipSQLWhere} ORDER BY name";
		$membershipLevelResults = $wpdb->get_results($membershipSQL);
		$mlLookup = array();
		$zeroRow = array();
		foreach ($membershipLevelResults as $mres)
		{
			$mlLookup[$mres->id] = $mres->name;
			$zeroRow[$mres->name] = 0;
		}
		
		
		//create the four result sets: daily, weekly, monthly, yearly and initialize
		$dailyResultset = array();
		$weeklyResultset = array();
		$monthlyResultset = array();
		$yearlyResultset = array();
		
		//initialize daily
		$counterStartTime = strtotime(date("Y-m-d 00:00:00",$startTime));
		$counterEndTime = strtotime(date("Y-m-d 23:59:59",$endTime));
		
		for ($i=$counterStartTime; $i<= $counterEndTime; $i+=86400) //86400 secs in a day
		{
			$currentDate = date("Y-m-d",$i);
			$dailyResultset[$currentDate] = $zeroRow;
		}
		
		//initialize weekly (store only the sunday starting the week.. weeks go from Sun - Sat)
		$startDayOfWeek = date("w",$counterStartTime);
		$sundayOfStartWeekTime = strtotime("-{$startDayOfWeek} days",$counterStartTime);
		for ($i=$sundayOfStartWeekTime; $i <= $endTime; $i+=604800) //604800 secs in a week
		{
			$sundayDate = date("Y-m-d",$i);
			$weeklyResultset[$sundayDate] = $zeroRow;
		}
		
		
		//initialize monthly
		$startMonthTime = strtotime(date("Y-m-01 00:00",$counterStartTime));
		for ($i=$startMonthTime; $i<= $endTime; $i=strtotime("+1 month",$i)) //have to use strtotime for monthly because its not a real measurement
		{
			$firstDayOfMonthDate = date("Y-m-d",$i);
			$monthlyResultset[$firstDayOfMonthDate] = $zeroRow;
		}
		
		//initialize yearly
		$startYear = date("Y",$startTime);
		$endYear = date("Y",$endTime);
		
		for ($i=$startYear; $i <= $endYear; $i++)
		{
			$yearlyResultset[$i] = $zeroRow;
		}
		
		//originally this query was done using a join from order_item_acces to orders to user_data, hence the use of the term first_order_date
		//TODO: change first_order_date to something more appropriate (registration_date?)
		
		$neverActiveString = implode(",",array(MM_Status::$PENDING_ACTIVATION,MM_Status::$ERROR));
		$sqlWhere = $filtersPresent?" mud.membership_level_id IN ({$mlFilterString}) ":"";
		$sqlWhere = (empty($sqlWhere))?" WHERE (u.user_registered >= '{$startDate}')":" WHERE {$sqlWhere} AND (u.user_registered > '{$startDate}')";
		$sqlWhere .= " AND (u.user_registered <= '{$endDate}') AND mud.status NOT IN ({$neverActiveString})";
		
		$sql = "SELECT mud.membership_level_id, u.user_registered AS first_order_date ".
				"FROM {$userDataTable} mud INNER JOIN {$wpdb->users} u ON (mud.wp_user_id = u.ID) {$sqlWhere}";
		
		$res = _mmmq($sql, true);
		
		if ($res)
		{
  			$fetch_object_function = _mmmd()."_fetch_object";
  			$free_result_function = _mmmd()."_free_result";
  			$error_function = _mmmd()."_error";
  		
			while ($row = @$fetch_object_function($res))
			{
				//put each result in the correct bin
				$firstOrderTime = strtotime($row->first_order_date);
				
				//daily
				$currentDate = date("Y-m-d",$firstOrderTime);
				$dailyResultset[$currentDate][$mlLookup[$row->membership_level_id]]++;

				//weekly
				$offset = date("w",$firstOrderTime);
				$weekStartDate = date("Y-m-d",strtotime("-{$offset} days",$firstOrderTime));
				$weeklyResultset[$weekStartDate][$mlLookup[$row->membership_level_id]]++;
				
				//monthly
				$firstDayOfMonthDate = date("Y-m-01",$firstOrderTime);
				$monthlyResultset[$firstDayOfMonthDate][$mlLookup[$row->membership_level_id]]++;
				
				//yearly
				$year = date("Y",$firstOrderTime);
				$yearlyResultset[$year][$mlLookup[$row->membership_level_id]]++;
			}
			
			if ($error_message = $error_function($wpdb->dbh))
			{
				return new MM_ReportResponse("Error generating Member Count data ({$error_message})",MM_ReportResponse::$ERROR);	
			}
			
			@$free_result_function($res);
		}
		else 
		{
			return new MM_Response("Database error encountered while generating Member Count data",MM_ReportResponse::$ERROR);
		}
		
		//transform into final resultsets
		$finalDailyResultset = array();
		foreach ($dailyResultset as $k=>$v)
		{
			$dateLabel = date("m/d/y",strtotime($k));
			$finalDailyResultset[] = array('date'=>$dateLabel,'date_sort_value'=>$k) + $v;
		}
		unset ($dailyResultset);

		$finalWeeklyResultset = array();
		foreach ($weeklyResultset as $k=>$v)
		{
			$dateLabel = date("m/d/y",strtotime($k));
			$finalWeeklyResultset[] = array('date'=>$dateLabel,'date_sort_value'=>$k) + $v;
		}
		unset($weeklyResultset);
		
		$finalMonthlyResultset = array();
		foreach ($monthlyResultset as $k=>$v)
		{
			$dateLabel = date("m/Y",strtotime($k));
			$finalMonthlyResultset[] = array('date'=>$dateLabel,'date_sort_value'=>$k) + $v;
		}
		unset($monthlyResultset);
		
		$finalYearlyResultset = array();
		foreach ($yearlyResultset as $k=>$v)
		{
			$finalYearlyResultset[] = array('date'=>$k,'date_sort_value'=>$k) + $v;
		}
		unset($yearlyResultset);

		//return the created resultsets
		$dsArray = array("daily"   =>  $finalDailyResultset,
						 "weekly"  =>  $finalWeeklyResultset,
						 "monthly" =>  $finalMonthlyResultset,
						 "yearly"  =>  $finalYearlyResultset);

		$dataset = MM_ReportDataset::createCompoundReportDataset($params,$dsArray[$params['type']]);
		unset($dsArray[$params['type']]);
		foreach ($dsArray as $dsType=>$dsResultset)
		{
			$changedParams = array("type"=>$dsType) + $params;
			$dataset->addAdditionalDataset($changedParams, $dsResultset);
		}
		unset($dsArray);
		return $dataset;			
	}
	
	public static function generateData($queryIdentifier, $params)
	{
		switch ($queryIdentifier)
		{
			case self::$NEW_MEMBERS_BY_DATE_QUERY:
				return self::generateNewMembersByDateData($params);
				break;
			default:
				return new MM_Response("Error generating data for unknown query identifier {$queryIdentifier}",MM_Response::$ERROR);
		}
	}
	
}

